generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String? @db.Text
  oauth_token              String? @db.Text
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Coach {
  id              Int                @unique @default(autoincrement())
  name            String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now()) @updatedAt
  about           String
  dateOfBirth     DateTime
  contactNumber   String
  email           String             @unique
  designation     String
  gender          Gender
  payrollId       Int?
  trainingLevel   TrainingLevel
  experienceLevel ExperienceLevel
  centerId        Int?
  image           Bytes?
  payroll         Payroll?
  sports          CoachesOnSports[]
  certificates    Certificates[]
  centers         CoachesOnCenters[]
  batches         CoachesOnBatches[]

  @@index([centerId])
}

model Staff {
  id            Int           @unique @default(autoincrement())
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  contactNumber String
  email         String        @unique
  designation   String
  dateOfBirth   DateTime
  gender        Gender
  image         Bytes?
  center        StaffCenter[]
  payroll       Payroll?
  shift         Shift[]
}

model Shift {
  id      Int    @unique @default(autoincrement())
  shift   String
  staffId Int?
  Staff   Staff? @relation(fields: [staffId], references: [id])

  @@index([staffId])
}

model Inventory {
  id       Int     @unique @default(autoincrement())
  name     String
  quantity Int
  centerId Int?
  Center   Center? @relation(fields: [centerId], references: [id])

  @@index([centerId])
}

model Payroll {
  id      Int    @unique @default(autoincrement())
  coachId Int    @unique
  type    String
  staffId Int    @unique
  coach   Coach  @relation(fields: [coachId], references: [id])
  staff   Staff  @relation(fields: [staffId], references: [id])
}

model Sports {
  id        Int               @unique @default(autoincrement())
  name      String            @unique
  sub_title String?           @db.VarChar(255)
  coaches   CoachesOnSports[]
  Center    SportsOnCenters[]
}

model SportsOnCenters {
  sportId  Int
  centerId Int
  sport    Sports @relation(fields: [sportId], references: [id])
  center   Center @relation(fields: [centerId], references: [id])

  @@id([sportId, centerId])
  @@index([sportId])
  @@index([centerId])
}

model CoachesOnCenters {
  coachId    Int
  centerId   Int
  updatedAt  DateTime @default(now()) @updatedAt
  assignedAt DateTime @default(now())
  coach      Coach    @relation(fields: [coachId], references: [id])
  center     Center   @relation(fields: [centerId], references: [id])

  @@id([coachId, centerId])
  @@index([coachId])
  @@index([centerId])
}

model CoachesOnSports {
  coachId    Int
  sportId    Int
  assignedAt DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  coach      Coach    @relation(fields: [coachId], references: [id])
  sport      Sports   @relation(fields: [sportId], references: [id])

  @@id([coachId, sportId])
  @@index([coachId])
  @@index([sportId])
}

model Certificates {
  id            Int       @unique @default(autoincrement())
  name          String
  startEnd      DateTime?
  instituteName String
  endDate       DateTime?
  coachId       Int
  coach         Coach     @relation(fields: [coachId], references: [id])

  @@index([coachId])
}

model Center {
  id            Int                @unique @default(autoincrement())
  name          String             @unique
  location      String
  contactNumber String
  image         Bytes?
  sports        SportsOnCenters[]
  inventory     Inventory[]
  staff         StaffCenter[]
  coaches       CoachesOnCenters[]
  batches       Batches[]
}

model Batches {
  id               Int                @unique @default(autoincrement())
  name             String
  centerId         Int
  center           Center             @relation(fields: [centerId], references: [id])
  CoachesOnBatches CoachesOnBatches[]

  @@index([centerId])
}

model CoachesOnBatches {
  coachId    Int
  batchId    Int
  assignedAt DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  coach      Coach    @relation(fields: [coachId], references: [id])
  batch      Batches  @relation(fields: [batchId], references: [id])

  @@id([coachId, batchId])
  @@index([coachId])
  @@index([batchId])
}

model StaffCenter {
  staffId  Int
  centerId Int
  staff    Staff  @relation(fields: [staffId], references: [id])
  center   Center @relation(fields: [centerId], references: [id])

  @@id([staffId, centerId])
  @@index([staffId])
  @@index([centerId])
}

model BodyParts {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}

model InjuryLog {
  id           Int      @id @default(autoincrement())
  userId       Int
  date         DateTime @db.Date
  activityType String?  @db.VarChar(255)
  isAidDone    Boolean?
  recoveryTime Int?
  bodyPart     Int?
  description  String?  @db.Text
  image        Bytes?
}

model SportUser {
  id           Int       @id @default(autoincrement())
  isdCode      Int?
  phoneNumber  String?   @db.VarChar(20)
  otp          String?   @db.VarChar(5)
  otpCreatedAt DateTime? @db.Timestamp(0)
}

enum Gender {
  MALE
  FEMALE
}

enum TrainingLevel {
  BEGINNER
  DEVELOPER
  INTERMEDIATE_LEVEL
  ADVANCED_LEVEL
}

enum ExperienceLevel {
  ZERO_ONE
  TWO_FIVE
  SIX_TEN
  TEN_OVER
}
