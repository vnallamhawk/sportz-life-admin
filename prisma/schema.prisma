generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String? @db.Text
  oauth_token              String? @db.Text
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Staff {
  id            Int           @unique @default(autoincrement())
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  contactNumber String
  email         String        @unique
  designation   String
  dateOfBirth   DateTime
  gender        Gender
  image         Bytes?
  payroll       Payroll?
  shift         Shift[]
  center        StaffCenter[]
}

model Shift {
  id      Int    @unique @default(autoincrement())
  shift   String
  staffId Int?
  Staff   Staff? @relation(fields: [staffId], references: [id])

  @@index([staffId])
}

model Inventory {
  id       Int    @unique @default(autoincrement())
  name     String
  quantity Int
  centerId Int?

  @@index([centerId])
}

model Payroll {
  id      Int    @unique @default(autoincrement())
  coachId Int    @unique
  type    String
  staffId Int    @unique
  staff   Staff  @relation(fields: [staffId], references: [id])
}

model Sports {
  id        Int               @id @unique(map: "id") @default(autoincrement())
  name      String            @db.VarChar(255)
  subTitle  String            @db.VarChar(255)
  about     String            @db.Text
  status    Int?              @default(1) @db.TinyInt
  createdAt DateTime          @db.DateTime(0)
  updatedAt DateTime          @db.DateTime(0)
  deletedAt DateTime?         @db.DateTime(0)
  coaches   CoachesOnSports[]
  Center    SportsOnCenters[]
}

model SportsOnCenters {
  sportId  Int
  centerId Int
  sport    Sports @relation(fields: [sportId], references: [id])

  @@id([sportId, centerId])
  @@index([sportId])
  @@index([centerId])
}

model CoachesOnCenters {
  coachId    Int
  centerId   Int
  updatedAt  DateTime @default(now()) @updatedAt
  assignedAt DateTime @default(now())

  @@id([coachId, centerId])
  @@index([coachId])
  @@index([centerId])
}

model CoachesOnSports {
  coachId    Int
  sportId    Int
  assignedAt DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  sport      Sports   @relation(fields: [sportId], references: [id])

  @@id([coachId, sportId])
  @@index([coachId])
  @@index([sportId])
}

model Certificates {
  id            Int       @unique @default(autoincrement())
  name          String
  startDate     DateTime?
  instituteName String
  endDate       DateTime?
  coachId       Int

  @@index([coachId])
}

model Batches {
  id               Int                @id @unique(map: "id") @default(autoincrement())
  name             String             @db.VarChar(255)
  capacity         Int
  status           Int?               @default(1) @db.TinyInt
  createdAt        DateTime           @db.DateTime(0)
  updatedAt        DateTime           @db.DateTime(0)
  deletedAt        DateTime?          @db.DateTime(0)
  BatchSchedule    BatchSchedule[]
  CoachesOnBatches CoachesOnBatches[]
}

model CoachesOnBatches {
  coachId    Int
  batchId    Int
  assignedAt DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  batch      Batches  @relation(fields: [batchId], references: [id])

  @@id([coachId, batchId])
  @@index([coachId])
  @@index([batchId])
}

model StaffCenter {
  staffId  Int
  centerId Int
  staff    Staff @relation(fields: [staffId], references: [id])

  @@id([staffId, centerId])
  @@index([staffId])
  @@index([centerId])
}

model BodyParts {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}

model InjuryLog {
  id           Int      @id @default(autoincrement())
  userId       Int
  date         DateTime @db.Date
  activityType String?  @db.VarChar(255)
  isAidDone    Boolean?
  recoveryTime Int?
  bodyPart     Int?
  description  String?  @db.Text
  image        Bytes?
}

model SportUser {
  id           Int       @id @default(autoincrement())
  isdCode      Int?
  phoneNumber  String?   @db.VarChar(20)
  otp          String?   @db.VarChar(5)
  otpCreatedAt DateTime? @db.Timestamp(0)
}

model BatchSchedule {
  id        Int         @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  day       day_of_week
  batchesId Int?
  Batches   Batches?    @relation(fields: [batchesId], references: [id])

  @@index([batchesId], map: "BatchSchedule_batchesId_fkey")
}

model Academy {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(40)
  code String @db.VarChar(7)
}

model Academies {
  id        Int        @id @unique(map: "id") @default(autoincrement())
  name      String     @db.VarChar(255)
  code      String     @unique(map: "code") @db.VarChar(255)
  status    Int?       @default(1) @db.TinyInt
  createdAt DateTime   @db.DateTime(0)
  updatedAt DateTime   @db.DateTime(0)
  deletedAt DateTime?  @db.DateTime(0)
  Athletes  Athletes[]
  Coaches   Coaches[]
}

model AthleteSportsMaps {
  id            Int                             @id @unique(map: "id") @default(autoincrement())
  athleteId     Int
  sportsId      Int
  trainingLevel AthleteSportsMaps_trainingLevel
  centerId      Int
  batchId       Int
  status        Int?                            @default(1) @db.TinyInt
  createdAt     DateTime                        @db.DateTime(0)
  updatedAt     DateTime                        @db.DateTime(0)
  deletedAt     DateTime?                       @db.DateTime(0)
}

model Athletes {
  id             Int                 @id @unique(map: "id") @default(autoincrement())
  image          String?             @db.VarChar(255)
  name           String              @db.VarChar(255)
  dob            DateTime            @db.DateTime(0)
  gender         Athletes_gender
  bloodGroup     Athletes_bloodGroup
  height         Float               @db.Float
  heightUnit     Athletes_heightUnit
  weight         Float               @db.Float
  weightUnit     Athletes_weightUnit
  fatherName     String              @db.VarChar(255)
  countryCode    String?             @default("+91") @db.VarChar(255)
  phone          String?             @unique(map: "phone") @db.VarChar(255)
  email          String?             @unique(map: "email") @db.VarChar(255)
  address        String?             @db.VarChar(255)
  academyCode    Int
  medicalHistory Json?
  status         Int?                @default(1) @db.TinyInt
  createdAt      DateTime            @db.DateTime(0)
  updatedAt      DateTime            @db.DateTime(0)
  Academies      Academies           @relation(fields: [academyCode], references: [id], onDelete: NoAction, map: "Athletes_ibfk_1")

  @@index([academyCode], map: "academyCode")
}

model Centers {
  id        Int       @id @unique(map: "id") @default(autoincrement())
  name      String    @db.VarChar(255)
  image     Int?
  address   String    @db.Text
  mobile    String    @db.VarChar(255)
  status    Int?      @default(1) @db.TinyInt
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
}

model CoachSportsMaps {
  id        Int       @id @unique(map: "id") @default(autoincrement())
  coachId   Int
  sportsId  Int
  status    Int?      @default(1) @db.TinyInt
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  deletedAt DateTime? @db.DateTime(0)
  Coaches   Coaches   @relation(fields: [coachId], references: [id], onDelete: NoAction, map: "CoachSportsMaps_ibfk_1")

  @@index([coachId], map: "coachId")
}

model Coaches {
  id              Int                     @id @unique(map: "id") @default(autoincrement())
  name            String                  @db.VarChar(255)
  academyId       Int
  image           String?                 @db.VarChar(255)
  designation     String                  @db.VarChar(255)
  experience      String                  @db.VarChar(255)
  trainingLevel   Coaches_trainingLevel
  gender          Coaches_gender
  dateOfBirth     DateTime                @db.DateTime(0)
  countryCode     String                  @default("+91") @db.VarChar(255)
  phone           String?                 @unique(map: "phone") @db.VarChar(20)
  email           String?                 @unique(map: "email") @db.VarChar(255)
  about           String                  @db.Text
  payrollId       Int?
  experienceLevel Coaches_experienceLevel
  centerId        Int?
  status          Int?                    @default(1) @db.TinyInt
  createdAt       DateTime                @db.DateTime(0)
  updatedAt       DateTime                @db.DateTime(0)
  deletedAt       DateTime?               @db.DateTime(0)
  CoachSportsMaps CoachSportsMaps[]
  Academies       Academies               @relation(fields: [academyId], references: [id], onDelete: NoAction, map: "Coaches_ibfk_1")

  @@index([academyId], map: "academyId")
}

model Otps {
  id          Int            @id @default(autoincrement())
  countryCode String         @default("+91") @db.VarChar(255)
  mobile      String         @db.VarChar(255)
  otp         String         @db.VarChar(4)
  expiryTime  DateTime       @db.DateTime(0)
  verified    Int?           @default(0) @db.TinyInt
  userType    Otps_userType?
  status      Int?           @default(1) @db.TinyInt
  createdAt   DateTime       @db.DateTime(0)
  updatedAt   DateTime       @db.DateTime(0)
  deletedAt   DateTime?      @db.DateTime(0)
}

enum Gender {
  MALE
  FEMALE
}

enum day_of_week {
  mon
  tue
  wed
  thu
  fri
  sat
  sun
}

enum AthleteSportsMaps_trainingLevel {
  beginner
  developer
  intermediate_level
  advanced_level
}

enum Athletes_gender {
  male
  female
}

enum Athletes_bloodGroup {
  APos @map("A+")
  ANeg @map("A-")
  BPos @map("B+")
  BNeg @map("B-")
  ABPos @map("AB+")
  ABNeg @map("AB-")
  OPos @map("O+")
  ONeg @map("O-")
}

enum Coaches_trainingLevel {
  beginner
  developer
  intermediate_level
  advanced_level
}

enum Otps_userType {
  athlete
  coach
}

enum Athletes_heightUnit {
  cm
  feet
}

enum Coaches_gender {
  male
  female
}

enum Athletes_weightUnit {
  kg
  pounds
}

enum Coaches_experienceLevel {
  zero_one
  two_five
  six_ten
  ten_over
}
